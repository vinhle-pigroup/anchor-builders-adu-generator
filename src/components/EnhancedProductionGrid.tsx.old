import React, { useState, useCallback } from 'react';
import {
  User,
  Home,
  Paintbrush,
  FileText,
  CheckCircle,
  ArrowRight,
  FlaskConical,
} from 'lucide-react';
import { FormField } from './FormField';
import { ValidatedInput } from './ValidatedInput';
import { SidebarWithPricing } from './SidebarWithPricing';
import { AdditionalServicesCatalog, UtilitiesCatalog } from '../data/services-catalog';
import { ProjectData, PricingData } from '../types/proposal';

interface FormSection {
  id: string;
  title: string;
  isComplete: boolean;
}

interface EnhancedProductionGridProps {
  projectData: ProjectData;
  pricingData: PricingData;
  onProjectDataUpdate: (data: Partial<ProjectData>) => void;
  onPricingDataUpdate: (data: Partial<PricingData>) => void;
}

export const EnhancedProductionGrid: React.FC<EnhancedProductionGridProps> = ({
  projectData,
  pricingData,
  onProjectDataUpdate,
  onPricingDataUpdate,
}) => {
  console.log('üîç EnhancedProductionGrid rendering with:', { projectData, pricingData });
  const [currentSection, setCurrentSection] = useState('client');

  const updateProjectData = useCallback(
    (updates: Partial<ProjectData>) => {
      onProjectDataUpdate(updates);
    },
    [onProjectDataUpdate]
  );

  const updatePricingData = useCallback(
    (updates: Partial<PricingData>) => {
      onPricingDataUpdate(updates);
    },
    [onPricingDataUpdate]
  );

  // Calculate completion percentage for each section
  const calculateSectionProgress = (sectionId: string) => {
    switch (sectionId) {
      case 'client': {
        let completed = 0;
        const total = 7; // Proposal#, Date, FirstName, LastName, Email, Phone, Address
        
        // These are always complete (static data)
        completed += 2; // Proposal# and Date
        
        // Check required fields
        if (projectData.clientName) completed += 2; // First & Last name
        if (projectData.clientEmail) completed += 1;
        if (projectData.clientPhone) completed += 1;
        if (projectData.propertyAddress) completed += 1;
        
        return Math.round((completed / total) * 100);
      }
      case 'adu': {
        let completed = 0;
        const total = 4; // ADU Type, Square Footage, Bedrooms, Bathrooms
        
        if (projectData.aduType) completed += 1;
        if (projectData.squareFootage) completed += 1;
        if (projectData.bedrooms !== undefined) completed += 1;
        if (projectData.bathrooms !== undefined) completed += 1;
        
        return Math.round((completed / total) * 100);
      }
      case 'design': {
        // Based on any design service selection
        return pricingData.designServices || pricingData.solarReady || pricingData.femaCompliance ? 100 : 0;
      }
      case 'notes': {
        return projectData.additionalNotes ? 100 : 0;
      }
      default:
        return 0;
    }
  };

  // Define form sections with completion logic
  const sections: FormSection[] = [
    {
      id: 'client',
      title: 'Client Information',
      isComplete: !!(projectData.clientName && projectData.clientEmail && projectData.propertyAddress),
    },
    {
      id: 'adu',
      title: 'ADU Configuration',
      isComplete: !!(projectData.aduType && projectData.squareFootage),
    },
    {
      id: 'design',
      title: 'Design Services',
      isComplete: !!pricingData.designServices,
    },
    {
      id: 'notes',
      title: 'Additional Notes',
      isComplete: !!projectData.additionalNotes,
    },
  ];

  const shouldShowArrow = (sectionId: string) => {
    const section = sections.find(s => s.id === sectionId);
    if (!section) return false;

    if (section.isComplete) return false; // Don't show arrow if complete

    // Show arrow if this is the next incomplete section
    const allPrevious = sections.slice(
      0,
      sections.findIndex(s => s.id === sectionId)
    );
    return allPrevious.every(s => s.isComplete);
  };

  // Test data function
  const loadTestData = () => {
    updateProjectData({
      clientName: 'John Smith',
      clientEmail: 'john.smith@email.com',
      clientPhone: '(555) 123-4567',
      propertyAddress: '123 Main Street',
      city: 'Los Angeles',
      state: 'CA',
      zipCode: '90210',
      aduType: 'detached',
      squareFootage: 800,
      bedrooms: 2,
      bathrooms: 1,
      additionalNotes: 'This is a sample ADU project for testing the form functionality.',
      hvacType: 'central-ac',
    });

    updatePricingData({
      designServices: 12500,
      utilities: {
        water: 2500,
        gas: 1800,
        electric: 3200,
        sewer: 2200,
      },
    });
  };

  return (
    <div className='min-h-screen bg-gradient-to-br from-slate-100 to-blue-50'>
      {/* Header */}
      <div className='bg-white shadow-sm border-b'>
        <div className='container mx-auto px-4 py-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center'>
              <div className='w-12 h-12 bg-gradient-to-r from-blue-600 to-indigo-700 rounded-lg flex items-center justify-center mr-3 shadow-sm border border-blue-200'>
                <span className='text-white font-bold text-lg'>‚öì</span>
              </div>
              <div>
                <h1 className='text-lg font-bold text-slate-800'>
                  Anchor Builders
                </h1>
                <p className='text-xs text-slate-600'>ADU Proposal Generator</p>
              </div>
            </div>

            <div className='flex items-center gap-2 sm:gap-4'>
              {/* Test Data Button */}
              <button
                onClick={loadTestData}
                className='bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-3 py-2 sm:px-4 sm:py-2 rounded-lg text-xs sm:text-sm font-medium hover:from-blue-600 hover:to-indigo-700 transition-all flex items-center min-h-[44px]'
              >
                <FlaskConical className='w-4 h-4 mr-1' />
                <span className='sm:hidden'>Test</span>
                <span className='hidden sm:inline'>Load Test Data</span>
              </button>
              
              {/* Dark Mode Toggle */}
              <div className='w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white font-semibold text-sm cursor-pointer hover:bg-blue-700 transition-colors'>
                üåô
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className='container mx-auto px-4 py-6'>
        <div className='grid xl:grid-cols-4 gap-6'>
          {/* Main Form */}
          <div className='xl:col-span-3 space-y-4 sm:space-y-6'>
            {/* Client Information */}
            <div className='bg-white rounded-lg shadow-sm p-4'>
              <div className='flex items-center mb-3'>
                <div
                  className={`
                  w-5 h-5 mr-2 rounded flex items-center justify-center
                  ${
                    sections[0].isComplete
                      ? 'text-emerald-600'
                      : currentSection === 'client'
                        ? 'text-blue-600'
                        : 'text-slate-400'
                  }
                `}
                >
                  {sections[0].isComplete ? (
                    <CheckCircle className='w-5 h-5' />
                  ) : (
                    <User className='w-5 h-5' />
                  )}
                </div>
                <h2 className='text-lg font-semibold text-slate-800'>Client Information</h2>
                <div className='ml-auto flex items-center gap-2'>
                  {sections[0].isComplete ? (
                    <span className='text-xs font-bold text-emerald-700 bg-emerald-100 px-2 py-1 rounded-md border border-emerald-200'>
                      COMPLETE
                    </span>
                  ) : (
                    <span className='text-xs font-bold text-blue-700 bg-blue-100 px-2 py-1 rounded-md border border-blue-200'>
                      {calculateSectionProgress('client')}%
                    </span>
                  )}
                </div>
              </div>

              {/* Proposal Info */}
              <div className='grid grid-cols-2 gap-4 mb-4 bg-slate-50 p-3 rounded-lg'>
                <div>
                  <label className='text-xs font-medium text-slate-600 block mb-1'>Proposal #</label>
                  <div className='text-sm font-semibold text-blue-800'>AB-2025-830340</div>
                </div>
                <div>
                  <label className='text-xs font-medium text-slate-600 block mb-1'>Date</label>
                  <div className='text-sm text-slate-700'>Aug 10, 2025</div>
                </div>
              </div>

              {/* Property Address */}
              <div className='mb-4'>
                <label className='block text-sm font-medium text-slate-700 mb-2'>
                  Property Address
                </label>
                <div className='grid gap-3'>
                  <FormField label='Street Address' isRequired>
                    <ValidatedInput
                      type='text'
                      value={projectData.propertyAddress || ''}
                      onChange={value => updateProjectData({ propertyAddress: value })}
                      placeholder='Enter your property address'
                      fieldName='propertyAddress'
                    />
                  </FormField>
                  <div className='grid grid-cols-1 sm:grid-cols-3 gap-3'>
                    <FormField label='City' isRequired>
                      <ValidatedInput
                        type='text'
                        value={projectData.city || ''}
                        onChange={value => updateProjectData({ city: value })}
                        placeholder='Los Angeles'
                        fieldName='city'
                      />
                    </FormField>
                    <FormField label='State' isRequired>
                      <ValidatedInput
                        type='text'
                        value={projectData.state || ''}
                        onChange={value => updateProjectData({ state: value })}
                        placeholder='CA'
                        fieldName='state'
                      />
                    </FormField>
                    <FormField label='ZIP Code' isRequired>
                      <ValidatedInput
                        type='text'
                        value={projectData.zipCode || ''}
                        onChange={value => updateProjectData({ zipCode: value })}
                        placeholder='90210'
                        fieldName='zipCode'
                      />
                    </FormField>
                  </div>
                </div>
              </div>

              {/* Client Information */}
              <div className='mb-4'>
                <label className='block text-sm font-medium text-slate-700 mb-2'>
                  Primary Client
                </label>
                <div className='grid grid-cols-1 lg:grid-cols-2 gap-3'>
                  <FormField label='Full Name' isRequired>
                    <ValidatedInput
                      type='text'
                      value={projectData.clientName || ''}
                      onChange={value => updateProjectData({ clientName: value })}
                      placeholder='Enter client full name'
                      fieldName='clientName'
                    />
                  </FormField>
                  <FormField label='Email' isRequired>
                    <ValidatedInput
                      type='email'
                      value={projectData.clientEmail || ''}
                      onChange={value => updateProjectData({ clientEmail: value })}
                      placeholder='client@email.com'
                      fieldName='clientEmail'
                    />
                  </FormField>
                </div>
                <FormField label='Phone'>
                  <ValidatedInput
                    type='tel'
                    value={projectData.clientPhone || ''}
                    onChange={value => updateProjectData({ clientPhone: value })}
                    placeholder='(555) 123-4567'
                    fieldName='clientPhone'
                  />
                </FormField>
              </div>
            </div>

            {/* ADU Configuration */}
            <div className='bg-white rounded-lg shadow-sm p-4'>
              <div className='flex items-center mb-3'>
                <div
                  className={`
                  w-5 h-5 mr-2 rounded flex items-center justify-center
                  ${
                    sections[1].isComplete
                      ? 'text-emerald-600'
                      : currentSection === 'adu'
                        ? 'text-blue-600'
                        : 'text-slate-400'
                  }
                `}
                >
                  {sections[1].isComplete ? (
                    <CheckCircle className='w-5 h-5' />
                  ) : (
                    <Home className='w-5 h-5' />
                  )}
                </div>
                <h2 className='text-lg font-semibold text-slate-800'>ADU Configuration</h2>
                <div className='ml-auto flex items-center gap-2'>
                  {sections[1].isComplete ? (
                    <span className='text-xs font-bold text-emerald-700 bg-emerald-100 px-2 py-1 rounded-md border border-emerald-200'>
                      COMPLETE
                    </span>
                  ) : (
                    <span className='text-xs font-bold text-blue-700 bg-blue-100 px-2 py-1 rounded-md border border-blue-200'>
                      {calculateSectionProgress('adu')}%
                    </span>
                  )}
                </div>
              </div>

              <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
                  <ValidatedInput
                    type='text'
                    value={projectData.propertyAddress || ''}
                    onChange={value => updateProjectData({ propertyAddress: value })}
                    placeholder='Enter your property address (street, city, state)'
                    fieldName='propertyAddress'
                  />
                </FormField>

                <div className='grid grid-cols-3 gap-3'>
                  <FormField label='City' isRequired>
                    <ValidatedInput
                      type='text'
                      value={projectData.city || ''}
                      onChange={value => updateProjectData({ city: value })}
                      placeholder='Los Angeles'
                      fieldName='city'
                    />
                  </FormField>

                  <FormField label='State' isRequired>
                    <ValidatedInput
                      type='text'
                      value={projectData.state || ''}
                      onChange={value => updateProjectData({ state: value })}
                      placeholder='CA'
                      fieldName='state'
                    />
                  </FormField>

                  <FormField label='ZIP Code' isRequired>
                    <ValidatedInput
                      type='text'
                      value={projectData.zipCode || ''}
                      onChange={value => updateProjectData({ zipCode: value })}
                      placeholder='Enter 5-digit ZIP code'
                      fieldName='zipCode'
                    />
                  </FormField>
                </div>
              </div>
            </div>

            </div>

            {/* RIGHT COLUMN */}
            <div className='space-y-6'>
            {/* Card 2: ADU CONFIGURATION */}
            <div
              className={`
              relative bg-white rounded-2xl p-4 shadow-lg border-2
              ${currentSection === 'adu' ? 'border-blue-400 shadow-xl' : 'border-gray-200'}
              transition-all duration-300 hover:shadow-lg
            `}
            >
              {/* Card Header */}
              <div className='flex items-center justify-between mb-4'>
                <div className='flex items-center gap-3'>
                  <div
                    className={`
                    w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold
                    ${
                      sections[1].isComplete
                        ? 'bg-green-500 text-white'
                        : currentSection === 'adu'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 text-gray-600'
                    }
                  `}
                  >
                    {sections[1].isComplete ? (
                      <CheckCircle className='w-5 h-5' />
                    ) : (
                      <Home className='w-5 h-5' />
                    )}
                  </div>
                  <h3 className='text-lg font-semibold text-gray-800'>ADU CONFIGURATION</h3>
                </div>
                <div className='flex items-center gap-2'>
                  {sections[1].isComplete ? (
                    <span className='text-xs font-bold text-green-600 bg-green-50 px-2 py-1 rounded'>
                      COMPLETE
                    </span>
                  ) : (
                    <span className='text-xs font-bold text-blue-600 bg-blue-50 px-2 py-1 rounded'>
                      {calculateSectionProgress('adu')}%
                    </span>
                  )}
                  {shouldShowArrow('adu') && (
                    <div className='text-blue-500 animate-pulse'>
                      <ArrowRight className='w-6 h-6' />
                    </div>
                  )}
                </div>
              </div>

              {/* Card Content - Compact Layout */}
              <div className='space-y-3'>
                {/* ADU Type and Square Footage Row */}
                <div className='grid grid-cols-2 gap-4'>
                  <div>
                    <label className='text-xs font-medium text-gray-700 block mb-2'>ADU Type *</label>
                    <div className='grid grid-cols-1 gap-1'>
                      {[
                        { value: 'detached', label: 'Detached' },
                        { value: 'attached', label: 'Attached' },
                        { value: 'jadu', label: 'JADU' },
                      ].map(option => (
                        <button
                          key={option.value}
                          type='button'
                          onClick={() => updateProjectData({ aduType: option.value })}
                          className={`
                            px-2 py-1.5 text-xs rounded border transition-all
                            ${
                              projectData.aduType === option.value
                                ? 'bg-gradient-to-r from-blue-100 to-indigo-100 border-blue-500 text-blue-800 shadow-sm'
                                : 'bg-white border-gray-300 text-gray-700 hover:border-blue-400 hover:shadow-sm'
                            }
                          `}
                        >
                          {option.label}
                        </button>
                      ))}
                    </div>
                  </div>
                  <div>
                    <label className='text-xs font-medium text-gray-700 block mb-2'>Square Footage *</label>
                    <div className='mb-2'>
                      <ValidatedInput
                        type='number'
                        min={1}
                        value={projectData.squareFootage || ''}
                        onChange={value => updateProjectData({ squareFootage: parseInt(value) || 0 })}
                        placeholder='Enter sq ft'
                        fieldName='squareFootage'
                        className='text-xs py-1.5 px-2 w-full text-center'
                      />
                    </div>
                    <div className='grid grid-cols-2 gap-1'>
                      {[600, 800, 1000, 1200].map(sqft => (
                        <button
                          key={sqft}
                          type='button'
                          onClick={() => updateProjectData({ squareFootage: sqft })}
                          className={`
                            px-2 py-1 text-xs rounded border transition-all
                            ${
                              projectData.squareFootage === sqft
                                ? 'bg-blue-100 border-blue-400 text-blue-700'
                                : 'bg-white border-gray-300 text-gray-700 hover:border-blue-300'
                            }
                          `}
                        >
                          {sqft}
                        </button>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Bedrooms & Bathrooms */}
                <div className='grid grid-cols-2 gap-3'>
                  <FormField label='Bedrooms'>
                    <div className='grid grid-cols-3 gap-1'>
                      {[1, 2, 3].map(num => (
                        <button
                          key={num}
                          type='button'
                          onClick={() => updateProjectData({ bedrooms: num })}
                          className={`
                            py-1.5 text-xs font-medium rounded border transition-all
                            ${
                              projectData.bedrooms === num
                                ? 'bg-gradient-to-r from-blue-600 to-indigo-700 border-blue-600 text-white shadow-md'
                                : 'bg-white border-gray-300 text-gray-700 hover:border-blue-400 hover:shadow-sm'
                            }
                          `}
                        >
                          {num}
                        </button>
                      ))}
                    </div>
                  </FormField>

                  <FormField label='Bathrooms'>
                    <div className='grid grid-cols-3 gap-1'>
                      {[1, 1.5, 2].map(num => (
                        <button
                          key={num}
                          type='button'
                          onClick={() => updateProjectData({ bathrooms: num })}
                          className={`
                            py-1.5 text-xs font-medium rounded border transition-all
                            ${
                              projectData.bathrooms === num
                                ? 'bg-gradient-to-r from-blue-600 to-indigo-700 border-blue-600 text-white shadow-md'
                                : 'bg-white border-gray-300 text-gray-700 hover:border-blue-400 hover:shadow-sm'
                            }
                          `}
                        >
                          {num}
                        </button>
                      ))}
                    </div>
                  </FormField>
                </div>

                {/* HVAC and Utilities Row */}
                <div className='grid grid-cols-2 gap-4'>
                  {/* HVAC Section */}
                  <div>
                    <label className='text-xs font-medium text-blue-700 block mb-2'>‚ùÑÔ∏è HVAC</label>
                    <div className='grid grid-cols-1 gap-1'>
                      {[
                        {
                          value: 'central-ac',
                          label: 'Central AC',
                        },
                        {
                          value: 'mini-split',
                          label: 'Mini-Split',
                        },
                      ].map(option => (
                        <button
                          key={option.value}
                          type='button'
                          onClick={() => updateProjectData({ hvacType: option.value })}
                          className={`
                            p-2 text-xs rounded border transition-all text-center
                            ${
                              projectData.hvacType === option.value
                                ? 'bg-blue-100 border-blue-400 text-blue-700'
                                : 'bg-white border-gray-300 text-gray-700 hover:border-blue-300'
                            }
                          `}
                        >
                          <div className='text-xs font-medium'>{option.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  {/* Utilities Section */}
                  <div>
                    <label className='text-xs font-medium text-blue-700 block mb-2'>‚ö° Utilities</label>
                    <div className='grid grid-cols-2 gap-1'>
                      {UtilitiesCatalog.slice(0, 4).map(utility => {
                        const isSelected = pricingData.utilities?.[utility.key] > 0;
                        return (
                          <button
                            key={utility.key}
                            type='button'
                            onClick={() =>
                              updatePricingData({
                                utilities: {
                                  ...pricingData.utilities,
                                  [utility.key]: isSelected ? 0 : utility.separateCost,
                                },
                              })
                            }
                            className={`
                              p-1.5 text-xs rounded border transition-all text-center
                              ${
                                isSelected
                                  ? 'bg-blue-100 border-blue-400 text-blue-700'
                                  : 'bg-white border-gray-300 text-gray-700 hover:border-blue-300'
                              }
                            `}
                          >
                            <div className='text-xs font-medium'>{utility.label}</div>
                            <div className='text-[10px]'>{isSelected ? 'Separate' : 'Shared'}</div>
                          </button>
                        );
                      })}
                    </div>
                  </div>
                </div>

                {/* Additional Services */}
                <div className='border-t pt-3'>
                  <h4 className='text-xs font-semibold text-indigo-700 mb-2 flex items-center gap-1'>
                    <span>‚ûï</span> Additional Services
                  </h4>
                  <div className='space-y-2'>
                    {[
                      { key: 'extra-bathroom', label: 'Extra Bathroom', cost: 8000 },
                      { key: 'dedicated-driveway', label: 'Dedicated Driveway', cost: 5000 },
                      { key: 'basic-landscaping', label: 'Basic Landscaping', cost: 10000 },
                    ].map(service => (
                      <label
                        key={service.key}
                        className={`
                          cursor-pointer flex items-center justify-between p-2 rounded border text-xs transition-all
                          ${
                            pricingData.additionalServices?.[service.key]
                              ? 'bg-green-50 border-green-300'
                              : 'bg-white border-gray-300 hover:border-green-300'
                          }
                        `}
                      >
                        <input
                          type='checkbox'
                          checked={!!pricingData.additionalServices?.[service.key]}
                          onChange={e =>
                            updatePricingData({
                              additionalServices: {
                                ...pricingData.additionalServices,
                                [service.key]: e.target.checked ? service.cost : 0,
                              },
                            })
                          }
                          className='w-4 h-4 text-green-600 rounded'
                        />
                        <span className='font-medium flex-1 ml-2'>{service.label}</span>
                        <span className='font-bold text-green-600'>
                          +${service.cost.toLocaleString()}
                        </span>
                      </label>
                    ))}
                  </div>
                  <button className='text-xs text-blue-700 mt-2 hover:text-blue-800 hover:underline transition-colors'>+ Add More Services</button>
                </div>
              </div>
            </div>

            {/* Card 4: ADDITIONAL NOTES */}
            <div
              className={`
              relative bg-white rounded-2xl p-4 shadow-lg border-2
              ${currentSection === 'notes' ? 'border-blue-400 shadow-xl' : 'border-gray-200'}
              transition-all duration-300 hover:shadow-lg
            `}
            >
              {/* Card Header */}
              <div className='flex items-center justify-between mb-4'>
                <div className='flex items-center gap-3'>
                  <div
                    className={`
                    w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold
                    ${
                      sections[3].isComplete
                        ? 'bg-green-500 text-white'
                        : currentSection === 'notes'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 text-gray-600'
                    }
                  `}
                  >
                    {sections[3].isComplete ? (
                      <CheckCircle className='w-5 h-5' />
                    ) : (
                      <FileText className='w-5 h-5' />
                    )}
                  </div>
                  <h3 className='text-lg font-semibold text-gray-800'>ADDITIONAL NOTES</h3>
                </div>
                <div className='flex items-center gap-2'>
                  {sections[3].isComplete ? (
                    <span className='text-xs font-bold text-green-600 bg-green-50 px-2 py-1 rounded'>
                      COMPLETE
                    </span>
                  ) : (
                    <span className='text-xs font-bold text-blue-600 bg-blue-50 px-2 py-1 rounded'>
                      {calculateSectionProgress('notes')}%
                    </span>
                  )}
                  {shouldShowArrow('notes') && (
                    <div className='text-blue-500 animate-pulse'>
                      <ArrowRight className='w-6 h-6' />
                    </div>
                  )}
                </div>
              </div>

              {/* Card Content */}
              <div className='space-y-3'>
                <FormField label='Project Notes'>
                  <textarea
                    value={projectData.additionalNotes || ''}
                    onChange={e => updateProjectData({ additionalNotes: e.target.value })}
                    placeholder='Special requirements, client preferences, site conditions...'
                    className='w-full h-20 px-3 py-2 border border-gray-300 rounded-md text-sm resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent'
                  />
                </FormField>
              </div>
            </div>

            {/* Card 3: DESIGN SERVICES */}
            <div
              className={`
              relative bg-white rounded-2xl p-4 shadow-lg border-2
              ${currentSection === 'design' ? 'border-blue-400 shadow-xl' : 'border-gray-200'}
              transition-all duration-300 hover:shadow-lg
            `}
            >
              {/* Card Header */}
              <div className='flex items-center justify-between mb-4'>
                <div className='flex items-center gap-3'>
                  <div
                    className={`
                    w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold
                    ${
                      sections[2].isComplete
                        ? 'bg-green-500 text-white'
                        : currentSection === 'design'
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-200 text-gray-600'
                    }
                  `}
                  >
                    {sections[2].isComplete ? (
                      <CheckCircle className='w-5 h-5' />
                    ) : (
                      <Paintbrush className='w-5 h-5' />
                    )}
                  </div>
                  <h3 className='text-lg font-semibold text-gray-800'>DESIGN SERVICES</h3>
                </div>
                <div className='flex items-center gap-2'>
                  {sections[2].isComplete ? (
                    <span className='text-xs font-bold text-green-600 bg-green-50 px-2 py-1 rounded'>
                      COMPLETE
                    </span>
                  ) : (
                    <span className='text-xs font-bold text-blue-600 bg-blue-50 px-2 py-1 rounded'>
                      {calculateSectionProgress('design')}%
                    </span>
                  )}
                  {shouldShowArrow('design') && (
                    <div className='text-blue-500 animate-pulse'>
                      <ArrowRight className='w-6 h-6' />
                    </div>
                  )}
                </div>
              </div>

              {/* Card Content */}
              <div className='space-y-3'>
                <div className='space-y-3'>
                  <div className='text-sm font-medium text-gray-700 mb-2'>Professional Design Services</div>
                  
                  {/* Include Design Services */}
                  <label className='cursor-pointer flex items-start gap-3 p-3 rounded border border-green-300 bg-green-50 transition-all'>
                    <input
                      type='checkbox'
                      checked={pricingData.designServices === 12500}
                      onChange={e => updatePricingData({ designServices: e.target.checked ? 12500 : 0 })}
                      className='w-4 h-4 text-green-600 rounded mt-0.5'
                    />
                    <div className='flex-1'>
                      <div className='flex items-center justify-between'>
                        <span className='text-sm font-medium'>Include Design Services</span>
                        <span className='font-bold text-green-600'>+$12,500</span>
                      </div>
                      <p className='text-xs text-gray-600 mt-1'>Architectural plans, structural engineering, and permit assistance</p>
                    </div>
                  </label>

                  {/* Solar Ready */}
                  <label className='cursor-pointer flex items-center gap-3 p-3 rounded border border-gray-200 bg-white hover:border-gray-300 transition-all'>
                    <input
                      type='checkbox'
                      checked={!!pricingData.solarReady}
                      onChange={e => updatePricingData({ solarReady: e.target.checked })}
                      className='w-4 h-4 text-gray-600 rounded'
                    />
                    <span className='text-sm font-medium text-gray-700'>Solar Ready</span>
                  </label>

                  {/* FEMA Compliance */}
                  <label className='cursor-pointer flex items-center gap-3 p-3 rounded border border-gray-200 bg-white hover:border-gray-300 transition-all'>
                    <input
                      type='checkbox'
                      checked={!!pricingData.femaCompliance}
                      onChange={e => updatePricingData({ femaCompliance: e.target.checked })}
                      className='w-4 h-4 text-gray-600 rounded'
                    />
                    <span className='text-sm font-medium text-gray-700'>FEMA Compliance</span>
                  </label>
                </div>
              </div>
            </div>
            </div>
          </div>
        </div>

        {/* Sidebar with Pricing */}
        <SidebarWithPricing
          sections={sections}
          currentSection={currentSection}
          onSectionSelect={setCurrentSection}
          onExpandAll={() => {}}
          allExpanded={false}
          formData={projectData}
          pricingData={pricingData}
          isFormComplete={sections.every(s => s.isComplete)}
        />
      </div>
    </div>
  );
};